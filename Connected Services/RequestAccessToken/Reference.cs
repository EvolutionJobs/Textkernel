//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RequestAccessToken
{
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken")]
    public partial class requestAccessTokenSoapFault
    {
        
        private errorCode errorCodeField;
        
        private bool errorCodeFieldSpecified;
        
        private string messageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public errorCode errorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool errorCodeSpecified
        {
            get
            {
                return this.errorCodeFieldSpecified;
            }
            set
            {
                this.errorCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken")]
    public enum errorCode
    {
        
        /// <remarks/>
        INVALID_CREDENTIALS,
        
        /// <remarks/>
        VALIDATION_FAILED,
        
        /// <remarks/>
        OTHER,
        
        /// <remarks/>
        SEARCH_ERROR,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", ConfigurationName="RequestAccessToken.RequestAccessTokenService")]
    internal interface RequestAccessTokenService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://home.textkernel.nl/sourcebox/soap/requestAccessToken/RequestAccessTokenSer" +
            "vice/getTokenRequest", ReplyAction="http://home.textkernel.nl/sourcebox/soap/requestAccessToken/RequestAccessTokenSer" +
            "vice/getTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RequestAccessToken.requestAccessTokenSoapFault), Action="http://home.textkernel.nl/sourcebox/soap/requestAccessToken/RequestAccessTokenSer" +
            "vice/getToken/Fault/RequestAccessTokenException", Name="RequestAccessTokenException")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<RequestAccessToken.getTokenResponse> getTokenAsync(RequestAccessToken.getTokenRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getToken", WrapperNamespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", IsWrapped=true)]
    internal partial class getTokenRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string account;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string environment;
        
        public getTokenRequest()
        {
        }
        
        public getTokenRequest(string account, string username, string password, string environment)
        {
            this.account = account;
            this.username = username;
            this.password = password;
            this.environment = environment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getTokenResponse", WrapperNamespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", IsWrapped=true)]
    internal partial class getTokenResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://home.textkernel.nl/sourcebox/soap/requestAccessToken", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string @return;
        
        public getTokenResponse()
        {
        }
        
        public getTokenResponse(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    internal interface RequestAccessTokenServiceChannel : RequestAccessToken.RequestAccessTokenService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    internal partial class RequestAccessTokenServiceClient : System.ServiceModel.ClientBase<RequestAccessToken.RequestAccessTokenService>, RequestAccessToken.RequestAccessTokenService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RequestAccessTokenServiceClient() : 
                base(RequestAccessTokenServiceClient.GetDefaultBinding(), RequestAccessTokenServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.RequestAccessTokenServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestAccessTokenServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RequestAccessTokenServiceClient.GetBindingForEndpoint(endpointConfiguration), RequestAccessTokenServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestAccessTokenServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RequestAccessTokenServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestAccessTokenServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RequestAccessTokenServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestAccessTokenServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<RequestAccessToken.getTokenResponse> RequestAccessToken.RequestAccessTokenService.getTokenAsync(RequestAccessToken.getTokenRequest request)
        {
            return base.Channel.getTokenAsync(request);
        }
        
        public System.Threading.Tasks.Task<RequestAccessToken.getTokenResponse> getTokenAsync(string account, string username, string password, string environment)
        {
            RequestAccessToken.getTokenRequest inValue = new RequestAccessToken.getTokenRequest();
            inValue.account = account;
            inValue.username = username;
            inValue.password = password;
            inValue.environment = environment;
            return ((RequestAccessToken.RequestAccessTokenService)(this)).getTokenAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RequestAccessTokenServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RequestAccessTokenServicePort))
            {
                return new System.ServiceModel.EndpointAddress("https://staging.textkernel.nl/match/soap/requestAccessTokenWS");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RequestAccessTokenServiceClient.GetBindingForEndpoint(EndpointConfiguration.RequestAccessTokenServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RequestAccessTokenServiceClient.GetEndpointAddress(EndpointConfiguration.RequestAccessTokenServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            RequestAccessTokenServicePort,
        }
    }
}
